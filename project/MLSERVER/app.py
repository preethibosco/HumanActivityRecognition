import streamlit as st
import joblib
import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model
import os

# --- Configuration ---
ARTIFACTS_DIR = "saved_artifacts"
IMAGES_DIR = "images"

# --- Load Artifacts (Cached for Performance) ---
@st.cache_resource
def load_sklearn_model(path):
    return joblib.load(path)

@st.cache_resource
def load_keras_model(path):
    return load_model(path, compile=False)

@st.cache_data
def load_joblib_data(path):
    return joblib.load(path)

# Construct full paths
log_reg_path = os.path.join(ARTIFACTS_DIR, "log_reg_model.joblib")
rf_model_path = os.path.join(ARTIFACTS_DIR, "rf_model.joblib")
lstm_model_path = os.path.join(ARTIFACTS_DIR, "lstm_model.h5")
label_encoder_path = os.path.join(ARTIFACTS_DIR, "label_encoder.joblib")
scaler_path = os.path.join(ARTIFACTS_DIR, "scaler.joblib")
final_columns_path = os.path.join(ARTIFACTS_DIR, "final_columns.joblib")
predefined_samples_path = os.path.join(ARTIFACTS_DIR, "predefined_samples.joblib")

# Load all artifacts
try:
    log_reg_model = load_sklearn_model(log_reg_path)
    rf_model = load_sklearn_model(rf_model_path)
    lstm_model = load_keras_model(lstm_model_path)
    label_encoder = load_sklearn_model(label_encoder_path)
    scaler = load_sklearn_model(scaler_path)
    final_selected_columns = load_joblib_data(final_columns_path)
    predefined_samples = load_joblib_data(predefined_samples_path)
    N_SELECTED_FEATURES = len(final_selected_columns)

except FileNotFoundError as e:
    # Display error in the main area if artifacts are missing
    st.error(f"Error loading artifacts: {e}")
    st.error(f"Could not find necessary files in '{ARTIFACTS_DIR}'. Please ensure the training/saving script was run successfully, including saving 'predefined_samples.joblib'.")
    st.stop() # Stop script execution
except Exception as e:
    st.error(f"An unexpected error occurred during loading: {e}")
    st.stop()


# --- Sidebar for Configuration ---
st.sidebar.header("‚öôÔ∏è Configuration")

# Model Selection Dropdown in Sidebar
model_options = ("Logistic Regression", "Random Forest", "LSTM")
selected_model_name = st.sidebar.selectbox("Choose a Model:", model_options)

# Select Sample Input Data in Sidebar
st.sidebar.subheader("Select Sample Data")

sample_input_data = None # Initialize
# Check if samples were loaded
if not predefined_samples:
    st.sidebar.warning("No predefined samples loaded.")
else:
    # Create dropdown for selecting sample
    sample_options = list(predefined_samples.keys())
    selected_sample_key = st.sidebar.selectbox("Choose a Sample:", sample_options)
    # Get the actual data array for the selected sample
    sample_input_data = predefined_samples[selected_sample_key]
    st.sidebar.caption(f"Using sample for: {selected_sample_key.replace('Sample: ', '')}")


# --- Main Panel Display ---
st.title("üö∂‚Äç‚ôÇÔ∏è UCI HAR Activity Prediction üö∂‚Äç‚ôÄÔ∏è")

# --- Add Header Image with CSS for Banner Effect ---
header_image_url = "https://images.pexels.com/photos/373543/pexels-photo-373543.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1" # Your chosen URL

# Inject CSS to control image height
st.markdown(
    """
    <style>
    /* Target the container generated by st.image */
    /* You might need to inspect element in browser & adjust selector if Streamlit structure changes */
    [data-testid="stImage"] > img {
        max-height: 250px;  /* Adjust max height as needed */
        object-fit: cover; /* Scale image nicely while maintaining aspect ratio */
    }
    </style>
    """,
    unsafe_allow_html=True
)

try:
    st.image(header_image_url, use_container_width=True)
except Exception as img_e:
    st.warning(f"Could not load header image from URL. Error: {img_e}")
# --- End Header Image ---

st.write("Configure the model and sample in the sidebar, then click Predict.")
st.write(f"(Models trained on {N_SELECTED_FEATURES} selected features)")
st.divider() # Add a visual separator

# --- Prediction Area ---
st.subheader("Prediction")

# Only proceed if sample data is available
if sample_input_data is not None:
    # Button to trigger prediction
    if st.button(f"Predict Activity for {selected_sample_key}"):
        try: # Add error handling for prediction steps
            # --- Preprocessing ---
            if sample_input_data.ndim == 1:
                 sample_input_data = sample_input_data.reshape(1, -1)
            scaled_input = scaler.transform(sample_input_data)

            # --- Prediction ---
            prediction_encoded = None
            st.write(f"Making prediction using: **{selected_model_name}**")

            if selected_model_name == "Logistic Regression":
                prediction_encoded = log_reg_model.predict(scaled_input)
            elif selected_model_name == "Random Forest":
                prediction_encoded = rf_model.predict(scaled_input)
            elif selected_model_name == "LSTM":
                reshaped_input = scaled_input.reshape((scaled_input.shape[0], 1, N_SELECTED_FEATURES))
                prediction_probs = lstm_model.predict(reshaped_input)
                prediction_encoded = np.argmax(prediction_probs, axis=1)

            # --- Decode and Display Result ---
            if prediction_encoded is not None:
                predicted_activity = label_encoder.inverse_transform(prediction_encoded)
                activity_name = predicted_activity[0]

                st.success(f"The predicted activity is: **{activity_name}**")

                # --- Display Activity Image ---
                image_filename = f"{activity_name}.jpeg" # Assuming jpeg
                image_path = os.path.join(IMAGES_DIR, image_filename)

                # Use columns for better layout of text & image
                col1, col2 = st.columns([0.7, 0.3]) # Adjust ratio if needed
                with col1:
                     st.write(" ") # Placeholder or add confidence score if available later
                with col2:
                    if os.path.exists(image_path):
                        st.image(image_path, caption=f"{activity_name}", width=150) # Adjust width
                    else:
                        st.warning(f"Img not found: {image_filename}")
                # --- End Activity Image Display ---
            else:
                st.error("Could not make a prediction.")

        except Exception as pred_e:
            st.error(f"An error occurred during prediction: {pred_e}")

else:
    st.warning("Select a valid sample from the sidebar to enable prediction.")


st.info("Note: This app uses predefined samples from the test set.")